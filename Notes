Instructor's solution: RedditClone
#try method usage
begin end while loop...
Use of inverse_of option on all regular has_many associations
Usage of #present? method
Usage of implicit rendering
Instead of setting manually, #new(etc: params[:etc]) looks cleaner

Usage of @new_comment = @comment.child_comments.new -> I guess the reasoning
behind this is to use all the inverse_of options set

You've been utilizing render in a lot of situations where you should have
redirected. Think about where you are in the application, and whether the
path should change or controller methods should be called.

Checks for moderator/owner before displaying edit/etc, I forgot...
------------------------------------------------------------------

Rail's Lite!
-------------
How to use a tool vs how a tool works/how to build one!

HTTP, web application frameworks, Rails, request/response cycle

Understand the point of each spec-- understand the greater context of
the framework.

HTTP: hypertext transfer protocol
Hypertext -> can take you to other media
Transfer -> All about sending hypertext to one location to another
Protocol -> Agreed on set of rules about how the transfer will take place

Transfer is just a request and response!

HTTP Request -> presumes a reliable connection, just what the text is going to be
sent is going to look like

HTTP REQUEST :
HTTP-METHOD HTTP-PATH HTTP-VERSION(HTTP/1.1)
Headers! Metadata(Language: , host: , host is one of the only required headers)
(After all the headers, two returns for a blank space)
GET request no body according to HTTP-standard, so it ends here!

HTTP RESPONSE:
HTTP VERSION STATUS-CODE MESSAGE
Headers! Content-Length Content-Type(text html etc)
Blank line
The body, the response, the content!

nc -> netcap
nc host port
method path version
Host

Look at the response! Has things such as accept-ranges, cache-control, content-type,
date, etag, expires, etc, a body...
-------------------------------------------------------

Rails -> web application framework
Software framework specifically to make web apps!
Rails receives HTTP requests and gives back HTTP responses

HTTP request -> webserver(webrick) -> Rails!
Rails has prebuilt: Router, ActionController::Base, ActiveRecord::Base, generates
SQL queries for us, controller sends back response!

We write: routes, controller which inherits from ActionController, model which
inherits from ActiveRecord, view

Router matches w/ routes file for matches, if it does after receiving a request,
it instantiates a new controller instance. Also give params!
-------------------------------------------------------------
Make base controller and router class! -> Base Rails functionality

Hmm, how is getting the params and instance variables everywhere working?
Let's see by building Rails Lite!
-----------------------------------------------------
Rack -> Middleware
Rack sits between Web Servers and Web Application Frameworks

WEBrick -> default Rails server for Rails 4. (Rails 5 and 6 uses Puma)

Webservers: Unicorn, WEBrick, Thin, Puma, etc
Multiple Ruby web application frameworks: Padrino, Rails, Sinatra, Camping, etc

Web server takes HTTP request and parse into Ruby object, then pass into web
application framework.

Once request is processed and web application framework sends response back to the
web server!

What Rack does is make all webservers and web application frameworks compliant
with it. This way, all web servers can communicate w/ all web application frameworks
and vice-versa.

e.g. all it is a set of rules of how a HTTP request and HTTP response must look
like as Ruby objects
-----------------------------------------------------------------
Rack demo!
Rack::Server.start -> app(class name), port
::Request.new -> can call #params, #cookies, #path
::Response.new -> can call #write, #finish, #set_cookie
def self.call(env) after making a class w/ App Name
require 'json' for #to_json

Proc object instead of a class! -> Rack just needs to respond to a method
call, receive 1 argument, then return a properly formatted Rack response.

How to do a redirect? Set a status code and a header(location)
e.g res['Location'] = google.com

Chrome dev -> Application -> Cookies
---------------------------------------------------------

TCP - Transmission Control Protocol
IP - Internet Protocol

Developed with these key philosophies in mind: (large-scale distributed
survivable communication network)
1. decentralized network
2. dividing messages into message blocks (packets)
3. delivering messages using "store and forward" method

IP -> set of rules for sending info from 1 PC to another. Handles both
assigning addresses and routing information from a source to a target.
Can cross network boundaries.
Internet (inter-network process)
Main functions that IP standarizes are:
1. finding next-hop host and sending packet to that host
2. capturing incoming packets and passing payloads to transport layer
3. providing error detection and diagnostics
IP -> unreliable service and best effort delivery
IP addresses -> identifier assigned to a computer connected to a TCP/IP
network. Two major versions: IPv4 32 bit addresses, IPv6 128 bit addresses

Packet -> formatted unit of data that contains along w/ payload, control
info: data for delivering payload. Control info stored in header of packet
typically includes source and destination addresses.
Example of a datagram, characteristic is having enough info to make from
source to target w/o two computers previously communicated.

TCP - higher level protocol running on top of IP. Provides applications w/
info delivered by IP, but provides additional work ensuring info is reliable,
ordered, and error checked. Maintains reliability by continually sending
acknowledgments to the source of the info as it receives packets. If no
acknowledgment, send packet again! Is also responsible or breaking
large pieces of info into packets to be sent via IP, and reassembling
groups o individual packets into info that can be used by apps

Handshaking -> Three steps: synchronize, synchronize-acknowledgment, acknowledgment
Once this process has happened, 2 computers can send ino to each other using TCP

Ports: TCP uses port numbers to identify app end points on a PC.
E.g rails server -> localhost:3000, tells you both IP address of the live site
and the port on which to connect to the site.

Application Layer: abstraction of a set of protocols and interfaces used by
computers in a communications network, generally describes applications that
interact w/ TCP.Can include apps that implement protocols including:
Telnet, FTP, SMTP, DNS, HTTP, SSH

E.g Browser implements HTTP, underlaying transport layer uses TCP, internet layer
uses IP.
------------------------------

401 -> unauthorized
Rack::Response#write appends the given string to the body and updates Content-Length.
/^[^\?]*/ -> Captures everything after the / and before the ?

Web Server -> Rack -> Web App, and vice-versa
--------------------------

Rack additional functionality: additional modules of code in privileged spot
Things that need to happen but don't really belong in the web application

Store on middleware area!:
Static assets!
Generic common code used throughout the web application

Middleware -> make a class, initialize method w/ app as argument, save app
as instance variable, then call it with env as argument... app.call(env)!

Rack::Builder.new do
 DSL to utilize middleware! use, run, etc
end.to_app
#to_app makes the app Rack-compatible

Middleware initialized before webserver started!
Higher up == loaded first!

env[HTTP_USER_AGENT] tells you what the browser is!
'MSIE' == Internet Explorer

Console -> network conditions -> choose browser in google dev tools

Middeware -> initialized bottom up, called top down
-----------------------------------------------------
TCP is the transport protocol upon which HTTP uses
reliable -> guarantee that info is reliable and in order
Think about two armies and enemy town analogy-- how is this solved?
Keep sending messengers until you get a response!
Split into packets w/ meta-data, so you only need to resend parts and not the
entire thing if lost. Then reconstruct once all messages are obtained!
Information constantly resent until confirmation is obtained.

DNS - domain name system
It's like putting a name on an envelope w/o an address and just handing it to the
post office, and it arrives! By what system does it work?
Host Name -> IP address
Browser asks OS if they've been there b4, info is cached!
If can't find since not visited yet, OS makes a DNS query!
DNS query to ISP, ISP has DNS resolver will do the entire process to find IP address
DNS resolver -> makes series of queries to different servers
DNS resolver -> starts at top level domain, gets response, if not found, query
next nameserver w/ information from previous

Remember that domains are split! e.g .com nameserver holds .com
.com -> google.com -> www.google.com (Worst case scenario)

Resolver and all nameserver also cache records!  DNS resolver shared by all who
uses said resolver (ie. uses same ISP)
Also, if DNS resolver knows where google.com is, can skip .com!

Resolver/namespaces can cache and skip steps if already has info! Rather fast.

Can advantage of the DNS process to do load-balancing, aka route people to diff.
physical servers based on on what the load/traffic is like. Each nameserver
determines how long its caching should be valid for!
-----------------------------------------------------------------

Server -> always running and client can connect to server
To create a server! require 'socket', TCPServer.new(put port here!)
while true
	socket = server.accept
	socket.close
end

nc -> open a TCP connection to a server

localhost is a special host name that means, "my own computer"
80 is traditional port for HTTP requests

require 'thread'
Thread.new do
	etc
end

Concurrency = two tasks can start, run, and complete in overlapping time periods
Parallelism = tasks literally run at the same time, e.g multi-core processor

Multithreading -> multiple threads of execution concurrently
Multiprocessing -> runnign two/more programs/sequences simultaneously by a computer
w/ more than one central processor

GIL -> Global Interpreter Lock -> Only allows one thread to execute at a time

--------------------------------------------------------------
Ruby -> thread raises an exception doesn't kill entire program!
Thread.abort_on_exception = true

CRUD servers: create, read, update, destroy

HTTP formalizes CRUD servers, a protocol! HTTP generalizes it!

On top of TCP, HTTP! HyperText Transfer Protocol on top of Transmission Control Protocol
HTML - HyperText Markup Language

REGEX to pull out info you want!
Match object will be the information you want or nil
Blank line == no more header!!
JSON.parse(json string)
-------------------------------------------------------------

Damn, these lecture + video + lecture repeating content 3x is hella tiring.

HTTP can transfer all sorts of diff. resources
3 steps of HTTP:
1. Establish connection btwn client and host (TCP handles this step)
2. Client creates a request and sends to host (string formatted to certain rules)
	a. HTTP method, request target, HTTP protocol version, header, body
	b. only host is necessary, all others optional for header.
	c. header is K:V pairs, diff header fields: https://en.wikipedia.org/wiki/List_of_HTTP_header_fields#Request_fields
	d. common fields: accept, content-type, cookie, host, user-agent
3. Host creates a response and sends to client
	a. HTTP protocol, status code, text of status code, header, body
	b. status codes fall into 1xx(info), 2xx(success), 3xx(redirection), 4xx(client error),
		 5xx(server error). 200 OK, 302 Moved, 404 Not Found, 500 Internal Server Error
	c. header fields: https://en.wikipedia.org/wiki/List_of_HTTP_header_fields#Response_fields
	d.content-type, date, last-modified, location, set-cookie
	e. response body: actual content of response. e.g HTML doc, JSON string, binary
		 data representing image, etc

MIME type: HTTP equiv. of filename extension. Specified in content-tyep response
header and tells client hwo to parse response body, composed of a type, subtype, and
zero or more optional parameters.
Common ones: application/json, application/pdf, application/zip, image/jpg,
image/png, image/gif, text/html, text/plain

Rack does many things, summed up as a server-side framework its purpose is to
receive/parse HTTP requests and generate HTTP responses.

Middleware -> sits between web server and web framework to standarize

To create a Rack server:
1. Require the 'rack' library
2. Create an object that responds to a #call method
3. The #call method should take one argument, conventionally called env,
		that bundles all the data about the request
4. The #call method should return an array with three elements:
	a. An HTTP status code (like '200' or '404')
	b. A hash of headers
	c. A response body
5. Pass the object to Rack::Server#start

8080 is the default port!

Rack::Request and Rack::Response to abstract HTTP request/response into objects
EtcController(req, res).go -> builds up the response object

Rack::Builder DSL to add additional middleware to framework.
	a. use <Middleware_name>
	b. run <NameofApp>
	c. #to_app will convert into type of object needed to pass into Rack::Server#start
Many of Rails features are implemented as middleware!
Group of middlewares == stack

#call(env) to skip and move onto next middleware or the application itself
--------------------------------------------------------
#instance_eval on instance -> instance method on ONE instance
#instance_eval on class -> creates class methods
#class_eval on instance -> creates instance methods

#instance_eval evaluates code in context of its receiver as an instance
#class_eval does the same as a class

Both are useful for dynamically creating methods!
-----------------------------------------------------------

Completing https://regexone.com/ !!!
1. EVERYTHING is a character
2. writing patterns to match a specific sequence of characters(string)
3. can match normal ASCII or unicode

matches whatever you type in, in order! e.g abc123, starting anywhere in string
\w for alphanumeric numbers and digits,
\d any digit
\D any non-digit, capital for anything means non- version of it
. wildcard, to match a period you'll need to \.
[] will only match whatever that's inside
^ inside of square brackets to exclude
- inside of square brackets to indicate a character range, multiple character
	ranges can be used in the same set of brackets
{} to specify a certain number of matches, e.g a{3} to do aaa, can also do
	ranges for this like {1-3}, for at least once but at most 3 times
* and +, * being 0 or more /////// + being 1 or more, can combine with anything
? denotes optional, doesn't have to match to be a match
\s will match with any whitespace, \t tab, \n newline, \r carriage return, etc
^ outside of brackets to denote where to start matching
$ outside of brackets to denote where to end matching
() to capture information as a group
Nest () to nest captures! Use () multiple times to capture multiple groups
With groups, can use | as OR for different matches
\b matches boundary btwn word and a non-word... \w+\b to find words
Some allow back referencing, using \0 to refer to group 0, \1 to group 1, etc.
------------------------------------------------------------

Know how the basics of the HTTP request-response cycle works
Know how a server works at a basic level
Be able to explain the functionality of the ControllerBase class
Know how cookies are used by browsers and servers
Be able to write a router that parses a URL and instantiates the appropriate controller
Know how params get built out of the HTTP request's information
